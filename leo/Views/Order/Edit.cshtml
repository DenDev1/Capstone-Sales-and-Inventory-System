@model leo.Models.Order

@{
    ViewData["Title"] = "Edit Order";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <form asp-action="Edit" method="post" class="bg-light p-4 rounded shadow-sm">
        <input type="hidden" asp-for="OrderId" />

        <!-- First Row with side by side layout -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="CustomerName"></label>
                    <input asp-for="CustomerName" class="form-control rounded-pill" />
                    <span asp-validation-for="CustomerName" class="text-danger" readonly></span>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="ProductId">Product</label>
                    <select asp-for="ProductId" class="form-control rounded-pill" asp-items="ViewBag.ProductId"></select>
                    <span asp-validation-for="ProductId" class="text-danger"></span>
                </div>
            </div>
        </div>

        <!-- Second Row with side by side layout -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="Quantity"></label>
                    <input asp-for="Quantity" type="number" class="form-control rounded-pill" readonly />
                    <span asp-validation-for="Quantity" class="text-danger"></span>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="PartialPaymentAmount">Partial Payment</label>
                    <input asp-for="PartialPaymentAmount" type="number" class="form-control rounded-pill" />
                    <span asp-validation-for="PartialPaymentAmount" class="text-danger"></span>
                </div>
            </div>
        </div>

        <!-- Third Row with side by side layout -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="PaymentStatus">Payment Status</label>
                    <select asp-for="PaymentStatus" class="form-control rounded-pill">
                        <option value="FullyPaid">Fully Paid</option>
                    </select>
                    <span asp-validation-for="PaymentStatus" class="text-danger"></span>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="OrderDate"></label>
                    <input asp-for="OrderDate" type="datetime-local" class="form-control rounded-pill" />
                    <span asp-validation-for="OrderDate" class="text-danger"></span>
                </div>
            </div>
        </div>

        <!-- Remaining Balance in a full-width form group -->
        <div class="form-group mb-4">
            <label for="RemainingBalance">Remaining Balance</label>
            <input id="RemainingBalance" type="text" class="form-control rounded-pill" readonly />
        </div>

        <div class="form-group d-flex justify-content-between">
                    <input type="submit" value="Save" class="btn btn-primary rounded-pill px-4 shadow" />
                    <a asp-action="Index" class="btn btn-outline-secondary rounded-pill px-4 shadow">Back to List</a>
        </div>

    </form>
</div>
    </div>
    </div>
@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const partialPaymentInput = document.getElementById("PartialPaymentAmount");
            const remainingBalanceInput = document.getElementById("RemainingBalance");

            // Set the initial total amount (assuming this is passed from the server)
            const totalAmount = parseFloat(remainingBalanceInput.dataset.totalAmount) || 0;

            // Function to calculate the remaining balance
            function calculateRemainingBalance() {
                const partialPayment = parseFloat(partialPaymentInput.value) || 0;
                const remainingBalance = totalAmount - partialPayment;
                remainingBalanceInput.value = remainingBalance.toFixed(2);
            }

            // Event listener for partial payment input
            partialPaymentInput.addEventListener("input", calculateRemainingBalance);

            // Initial setup
            calculateRemainingBalance();
        });
    </script>
}
