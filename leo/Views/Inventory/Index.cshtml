    @model IEnumerable<leo.Models.Inventory>

    @{
        ViewData["Title"] = "Inventory";
    }
    <style>

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1050; /* Ensure it's above all other content */
            visibility: hidden; /* Start hidden */
            opacity: 0; /* Start invisible */
            transition: visibility 0s, opacity 0.5s ease; /* Smooth transition */
        }

            .overlay.active {
                visibility: visible; /* Show overlay */
                opacity: 1; /* Make visible */
            }

        .spinner {
            border: 5px solid rgba(255, 255, 255, 0.2);
            border-top: 5px solid white; /* White top for contrast */
            border-radius: 50%;
            width: 50px; /* Size of the spinner */
            height: 50px;
            animation: spin 1s linear infinite; /* Spin animation */
            margin-bottom: 20px; /* Space between spinner and text */
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        .success-message {
            color: white; /* Ensure text is white for visibility */
            font-size: 1.25rem; /* Adjust font size as needed */
            text-align: center;
            margin-top: 10px; /* Space between spinner and text */
        }
    </style>

    <div class="overlay" id="loadingOverlay">
        <div class="spinner"></div> <!-- Spinner for loading effect -->
        <div class="success-message" id="successMessage"></div>
    </div>


<!-- Bootstrap Modal -->
<div class="modal fade" id="deleteInventoryModal" tabindex="-1" aria-labelledby="deleteInventoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteInventoryModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <i class="nav-icon fas fa-trash-alt" style="font-size: 48px; color: #dc3545;"></i>
                <p class="mt-3">Are you sure you want to delete this items?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" id="confirmDeleteButton">Yes</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>
@* @if (TempData["DuplicateItems"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert" id="duplicateAlert">
        The following items were skipped due to duplication: @TempData["DuplicateItems"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
} *@
<p class="mb-3">
    @if (User.IsInRole("Admin"))
    {
        <div class="d-flex justify-content-start align-items-center">
            <a asp-action="Create" class="btn btn-success rounded-pill me-2">
                <i class="fas fa-plus-circle"></i> Add New Items
            </a>

            <a asp-action="DeletedProducts" asp-controller="Inventory" class="btn btn-secondary rounded-pill me-2">
                <i class="fas fa-trash-alt"></i> View Removed Items
            </a>

            <a asp-action="GenerateInventoryReport" class="btn btn-info rounded-pill d-flex align-items-center">
                <i class="fas fa-file-excel me-2"></i>
                Generate Inventory Report
            </a>


     @*        <form asp-action="ImportFromExcel" method="post" enctype="multipart/form-data" class="d-inline" id="importForm">
                <input type="file" name="file" accept=".xlsx" required onchange="this.form.submit()" style="display:none;" />
                <button type="submit" class="btn btn-success rounded-pill" onclick="document.querySelector('input[type=file]').click(); return false;">
                    <i class="fas fa-upload"></i> Import
                </button>
            </form> *@
        </div>
    }
</p>




    <!-- Filter Section -->
    <div class="row mb-3">
        <div class="col-md-6">
            <label for="sortFilter" class="form-label">Sort by Date:</label>
            <select id="sortFilter" class="form-select" onchange="filterProductsByDate()">
                <option value="all">All</option>
                <option value="latest">Latest</option>
                <option value="oldest">Oldest</option>
            </select>
        </div>
        <div class="col-md-6">
            <label for="stockFilter" class="form-label">Filter by Stock Status:</label>
            <select id="stockFilter" class="form-select" onchange="filterProductsByStock()">
                <option value="all">All</option>
                <option value="in-stock">In Stock</option>
                <option value="low-stock">Low Stock</option>
                <option value="out-of-stock">Out of Stock</option>
            </select>
        </div>
    </div>
    <div class="table-responsive">
        <table id="example1" class="table text-truncate">
            <thead class="table-dark">
                <tr>
                    <th>Products</th>
                    <th>@Html.DisplayNameFor(model => model.First().Category)</th>
                    <th>Suppliers</th>
                    <th>@Html.DisplayNameFor(model => model.First().Date)</th>
                    <th>@Html.DisplayNameFor(model => model.First().UnitPrice)</th>
                    <th>@Html.DisplayNameFor(model => model.First().StockQuantity)</th>
                    <th>@Html.DisplayNameFor(model => model.First().Description)</th>
                    <th>@Html.DisplayNameFor(model => model.First().StockStatus)</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="productsTableBody">
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.ProductName)</td>
                        <td>@Html.DisplayFor(modelItem => item.Category.CategoryName)</td>

                    <td>
                        @if (item.SupplierProfile != null && !string.IsNullOrEmpty(item.SupplierProfile.Supplier))
                        {
                            @Html.DisplayFor(modelItem => item.SupplierProfile.Supplier)
                        }
                        else
                        {
                            <span>N/A</span>
                        }
                    </td>
                        <td>@item.Date.ToString("MMMM dd yyyy hh:mm tt")</td>
                        <td>@Html.DisplayFor(modelItem => item.UnitPrice)</td>
                        <td>
                            @if (item.StockQuantity == 0)
                            {
                                <!-- If StockQuantity is 0, display a red danger badge -->
                                <span class="badge bg-danger">@Html.DisplayFor(modelItem => item.StockQuantity)</span>
                            }
                            else if (item.StockQuantity < 10)
                            {
                                <!-- If StockQuantity is less than 10 but greater than 0, display a red danger badge -->
                                <span class="badge bg-danger">@Html.DisplayFor(modelItem => item.StockQuantity)</span>
                            }
                            else if (item.StockQuantity > 10)
                            {
                                <!-- If StockQuantity is greater than 10, display a green success badge -->
                                <span class="badge bg-success">@Html.DisplayFor(modelItem => item.StockQuantity)</span>
                            }
                            else
                            {
                                <!-- If StockQuantity is exactly 10, display without a badge -->
                                <span>@Html.DisplayFor(modelItem => item.StockQuantity)</span>
                            }
                        </td>

                        <td>@Html.DisplayFor(modelItem => item.Description)</td>
                        <td>
                            @if (item.StockQuantity == 0)
                            {
                                <span class="badge bg-dark">Out of Stock</span>
                            }
                            else if (item.StockQuantity <= 10)
                            {
                                <span class="badge bg-danger">Low Stock</span>
                            }
                            else
                            {
                                <span class="badge bg-success">In Stock</span>
                            }
                        </td>
                        <td>

                            @if (User.IsInRole("Staff"))
                            {

                                <a asp-action="RequestStock" asp-route-productId="@item.ProductId" class="btn btn-success btn-sm rounded-pill ms-2">
                                    <i class="fas fa-paper-plane"></i> Request Stock
                                </a>

                            }
                            @if (User.IsInRole("Admin"))
                            {
                                <a asp-action="Edit" asp-route-id="@item.ProductId" class="btn btn-primary btn-sm rounded-pill">
                                    <i class="fas fa-edit"></i> Update
                                </a>
                            }




                            <form asp-action="Delete" asp-route-id="@item.ProductId" method="post" class="d-inline">

                            <button type="submit" class="delete-button btn btn-danger btn-sm rounded-pill">
                                <i class="bi bi-trash"></i> Delete
                            </button>

                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
    <script>
    // Function to show the modal
    function showDeleteModal(event) {
        event.preventDefault(); // Prevent the default form submission

        // Show the modal
        var deleteModal = new bootstrap.Modal(document.getElementById('deleteInventoryModal'));
        deleteModal.show();

        // Set up the confirm button to proceed with deletion
        document.getElementById('confirmDeleteButton').onclick = function () {
            // Proceed with form submission
            event.target.closest('form').submit(); // Submit the closest form
            deleteModal.hide(); // Hide the modal
        };
    }

    // Attach event listeners to the delete buttons
    document.querySelectorAll('.delete-button').forEach(function (button) {
        button.addEventListener('click', showDeleteModal);
    });
        $(document).ready(function () {
            // Show loading overlay and success message
            const successMessage = '@TempData["LoginSuccess"]'; // Get success message
            $('#successMessage').text(successMessage); // Set the success message
            $('#loadingOverlay').addClass('active'); // Show overlay

            // Automatically close the loading overlay and redirect after a few seconds (e.g., 2 seconds)
            setTimeout(function () {
                $('#loadingOverlay').removeClass('active'); // Hide overlay

            }, 1000); // 3000 milliseconds = 3 seconds
        });

        function filterProductsByDate() {
            var filter = $('#sortFilter').val();
            var rows = $('#productsTableBody tr').get();

            rows.sort(function (a, b) {
                var dateA = new Date($(a).find('td').eq(3).text());
                var dateB = new Date($(b).find('td').eq(3).text());

                if (filter === 'latest') {
                    return dateB - dateA; // Latest first
                } else {
                    return dateA - dateB; // Oldest first
                }
            });

            $.each(rows, function (index, row) {
                $('#productsTableBody').append(row);
            });
        }

        function filterProductsByStock() {
            var filter = $('#stockFilter').val();
            $('#productsTableBody tr').each(function () {
                var stockQuantity = parseInt($(this).find('td').eq(5).text());

                if (filter === 'in-stock' && stockQuantity > 10) {
                    $(this).show();
                } else if (filter === 'low-stock' && stockQuantity <= 10 && stockQuantity > 0) {
                    $(this).show();
                } else if (filter === 'out-of-stock' && stockQuantity === 0) {
                    $(this).show();
                } else if (filter === 'all') {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });

        }
    </script>
